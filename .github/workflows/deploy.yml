# .github/workflows/deploy.yml
name: Deploy Spring Boot to Elastic Beanstalk

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때마다 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃 (내 레포지토리 코드를 러너로 가져오기)
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설정 (프로젝트에 맞는 버전으로 변경)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 빌드 (Maven 사용 시 mvnw 명령어로 변경)
      #    실행 권한을 주고 빌드하여 .jar 파일 생성
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build

      # 4. AWS 자격 증명 설정
      #    GitHub Secrets에 저장된 AWS 키를 사용
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 

      # 5. Elastic Beanstalk CLI 액션을 사용한 배포
      #    이 부분이 바로 마켓플레이스 액션을 사용하는 핵심입니다.
      - name: Deploy to Elastic Beanstalk
        uses: gagoit/aws-elastic-beanstalk-cli-action@v1.0.0
        with:
          aws_region: ap-northeast-2
          application_name: 'Meow-dj'
          environment_name: 'Meow-dj-env'
          version_label: "v${{ github.sha }}" # 배포 버전을 고유하게 지정 (커밋 해시 사용)
          deployment_package: build/libs/*.jar # 빌드된 .jar 파일 경로
